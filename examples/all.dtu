[
1,
1.2,
hello,
hello?,
hello-there,
hello.there,
a.b.c,
a@b.com,
Hello,
Hello?,
Hello-There,
Hello.There,
A@b.com,
:hello,
:hello?,
:Hello,
:hello-there,
:hello.there,
:a@b.com,
$hello,
$hello?,
$hello-there,
$hello.there,
$a@b.com,
"hello!",
'hello!',
`hello!`,
(),
[],
{},
foo(),
bar[],
baz{},

Foo(),
Bar[],
Baz{},

foo(1),
bar[2],
baz{3},

foo(1,),
bar[2,],
baz{3,},

foo(1,2),
bar[2,3],
baz{3,4},

(1,),
(1, 2),
[1],
{1},
(a: 1,),
[a: 2],
{a: 3},

foo() (),
foo() [],
foo() {},
foo[] (),
foo[] [],
foo[] {},
foo{} (),
foo{} [],
foo{} {},

foo(1) (1),
foo(1,) (1,),
foo(1) [1],
foo(1) {1},
foo[1] (1),
foo[1] [1],
foo[1] {1},
foo{1} (1),
foo{1} [1],
foo{1} {1},

1 * 2,
1 + 2 * 3,
(1 + 2) * 3,
(1 + 2) * (3 + 4),

a = fn (a:1) {return(a)},

if (a < 10) {a * 10},

cond {
    | (a < 10) : 10
    | else: 42
},

enum (Option) {
    | None
    | Some(x)
},

a |> b,
a <| b,

:"This is a Keyword",
$"This is a var",
%"This is an identifier",
%"do something!"(),
#foo 42,
#Foo 42,
#"Foo Bar" 42,
#ignore lala() {},
#wat (1 / 0),
2 :: km/h,
4 :: int(),
#dec 4 :: int(),
...2,
-2 + +4,
a.b/c.d(),
A.b/C.d(),
a.b/c.d,
A.b/C.d,
"",
foo as bar,
]
